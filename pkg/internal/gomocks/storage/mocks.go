// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/aries-framework-go/pkg/storage (interfaces: Provider,Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	storage "github.com/hyperledger/aries-framework-go/pkg/storage"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProvider)(nil).Close))
}

// CloseStore mocks base method
func (m *MockProvider) CloseStore(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseStore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseStore indicates an expected call of CloseStore
func (mr *MockProviderMockRecorder) CloseStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseStore", reflect.TypeOf((*MockProvider)(nil).CloseStore), arg0)
}

// OpenStore mocks base method
func (m *MockProvider) OpenStore(arg0 string) (storage.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStore", arg0)
	ret0, _ := ret[0].(storage.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenStore indicates an expected call of OpenStore
func (mr *MockProviderMockRecorder) OpenStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStore", reflect.TypeOf((*MockProvider)(nil).OpenStore), arg0)
}

// OpenStoreWithDelete mocks base method
func (m *MockProvider) OpenStoreWithDelete(arg0 string) (storage.StoreWithDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenStoreWithDelete", arg0)
	ret0, _ := ret[0].(storage.StoreWithDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenStoreWithDelete indicates an expected call of OpenStoreWithDelete
func (mr *MockProviderMockRecorder) OpenStoreWithDelete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenStoreWithDelete", reflect.TypeOf((*MockProvider)(nil).OpenStoreWithDelete), arg0)
}

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockStore) Get(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockStoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStore)(nil).Get), arg0)
}

// Iterator mocks base method
func (m *MockStore) Iterator(arg0, arg1 string) storage.StoreIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Iterator", arg0, arg1)
	ret0, _ := ret[0].(storage.StoreIterator)
	return ret0
}

// Iterator indicates an expected call of Iterator
func (mr *MockStoreMockRecorder) Iterator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Iterator", reflect.TypeOf((*MockStore)(nil).Iterator), arg0, arg1)
}

// Put mocks base method
func (m *MockStore) Put(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockStoreMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockStore)(nil).Put), arg0, arg1)
}
