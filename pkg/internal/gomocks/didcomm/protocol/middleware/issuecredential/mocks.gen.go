// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hyperledger/aries-framework-go/pkg/didcomm/protocol/middleware/issuecredential (interfaces: Provider,Metadata)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hyperledger/aries-framework-go/component/vdr/api"
	service "github.com/hyperledger/aries-framework-go/pkg/didcomm/common/service"
	issuecredential "github.com/hyperledger/aries-framework-go/pkg/didcomm/protocol/issuecredential"
	verifiable "github.com/hyperledger/aries-framework-go/pkg/store/verifiable"
	ld "github.com/piprate/json-gold/ld"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// JSONLDDocumentLoader mocks base method.
func (m *MockProvider) JSONLDDocumentLoader() ld.DocumentLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONLDDocumentLoader")
	ret0, _ := ret[0].(ld.DocumentLoader)
	return ret0
}

// JSONLDDocumentLoader indicates an expected call of JSONLDDocumentLoader.
func (mr *MockProviderMockRecorder) JSONLDDocumentLoader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONLDDocumentLoader", reflect.TypeOf((*MockProvider)(nil).JSONLDDocumentLoader))
}

// VDRegistry mocks base method.
func (m *MockProvider) VDRegistry() api.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VDRegistry")
	ret0, _ := ret[0].(api.Registry)
	return ret0
}

// VDRegistry indicates an expected call of VDRegistry.
func (mr *MockProviderMockRecorder) VDRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VDRegistry", reflect.TypeOf((*MockProvider)(nil).VDRegistry))
}

// VerifiableStore mocks base method.
func (m *MockProvider) VerifiableStore() verifiable.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifiableStore")
	ret0, _ := ret[0].(verifiable.Store)
	return ret0
}

// VerifiableStore indicates an expected call of VerifiableStore.
func (mr *MockProviderMockRecorder) VerifiableStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifiableStore", reflect.TypeOf((*MockProvider)(nil).VerifiableStore))
}

// MockMetadata is a mock of Metadata interface.
type MockMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataMockRecorder
}

// MockMetadataMockRecorder is the mock recorder for MockMetadata.
type MockMetadataMockRecorder struct {
	mock *MockMetadata
}

// NewMockMetadata creates a new mock instance.
func NewMockMetadata(ctrl *gomock.Controller) *MockMetadata {
	mock := &MockMetadata{ctrl: ctrl}
	mock.recorder = &MockMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadata) EXPECT() *MockMetadataMockRecorder {
	return m.recorder
}

// CredentialNames mocks base method.
func (m *MockMetadata) CredentialNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CredentialNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// CredentialNames indicates an expected call of CredentialNames.
func (mr *MockMetadataMockRecorder) CredentialNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CredentialNames", reflect.TypeOf((*MockMetadata)(nil).CredentialNames))
}

// IssueCredentialV2 mocks base method.
func (m *MockMetadata) IssueCredentialV2() *issuecredential.IssueCredentialV2 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCredentialV2")
	ret0, _ := ret[0].(*issuecredential.IssueCredentialV2)
	return ret0
}

// IssueCredentialV2 indicates an expected call of IssueCredentialV2.
func (mr *MockMetadataMockRecorder) IssueCredentialV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCredentialV2", reflect.TypeOf((*MockMetadata)(nil).IssueCredentialV2))
}

// Message mocks base method.
func (m *MockMetadata) Message() service.DIDCommMsg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Message")
	ret0, _ := ret[0].(service.DIDCommMsg)
	return ret0
}

// Message indicates an expected call of Message.
func (mr *MockMetadataMockRecorder) Message() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockMetadata)(nil).Message))
}

// OfferCredentialV2 mocks base method.
func (m *MockMetadata) OfferCredentialV2() *issuecredential.OfferCredentialV2 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferCredentialV2")
	ret0, _ := ret[0].(*issuecredential.OfferCredentialV2)
	return ret0
}

// OfferCredentialV2 indicates an expected call of OfferCredentialV2.
func (mr *MockMetadataMockRecorder) OfferCredentialV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferCredentialV2", reflect.TypeOf((*MockMetadata)(nil).OfferCredentialV2))
}

// Properties mocks base method.
func (m *MockMetadata) Properties() map[string]interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Properties")
	ret0, _ := ret[0].(map[string]interface{})
	return ret0
}

// Properties indicates an expected call of Properties.
func (mr *MockMetadataMockRecorder) Properties() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Properties", reflect.TypeOf((*MockMetadata)(nil).Properties))
}

// ProposeCredentialV2 mocks base method.
func (m *MockMetadata) ProposeCredentialV2() *issuecredential.ProposeCredentialV2 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeCredentialV2")
	ret0, _ := ret[0].(*issuecredential.ProposeCredentialV2)
	return ret0
}

// ProposeCredentialV2 indicates an expected call of ProposeCredentialV2.
func (mr *MockMetadataMockRecorder) ProposeCredentialV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeCredentialV2", reflect.TypeOf((*MockMetadata)(nil).ProposeCredentialV2))
}

// RequestCredentialV2 mocks base method.
func (m *MockMetadata) RequestCredentialV2() *issuecredential.RequestCredentialV2 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCredentialV2")
	ret0, _ := ret[0].(*issuecredential.RequestCredentialV2)
	return ret0
}

// RequestCredentialV2 indicates an expected call of RequestCredentialV2.
func (mr *MockMetadataMockRecorder) RequestCredentialV2() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCredentialV2", reflect.TypeOf((*MockMetadata)(nil).RequestCredentialV2))
}

// StateName mocks base method.
func (m *MockMetadata) StateName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateName")
	ret0, _ := ret[0].(string)
	return ret0
}

// StateName indicates an expected call of StateName.
func (mr *MockMetadataMockRecorder) StateName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateName", reflect.TypeOf((*MockMetadata)(nil).StateName))
}
