/*
Copyright SecureKey Technologies Inc. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

package aead_test

import (
	"fmt"
	"testing"

	"github.com/golang/protobuf/proto"
	subtleaead "github.com/google/tink/go/aead/subtle"
	"github.com/google/tink/go/core/registry"
	commonpb "github.com/google/tink/go/proto/common_go_proto"
	hmacpb "github.com/google/tink/go/proto/hmac_go_proto"
	tinkpb "github.com/google/tink/go/proto/tink_go_proto"
	"github.com/google/tink/go/subtle/random"
	"github.com/stretchr/testify/require"

	"github.com/hyperledger/aries-framework-go/pkg/crypto/tinkcrypto/primitive/aead"
	"github.com/hyperledger/aries-framework-go/pkg/crypto/tinkcrypto/primitive/aead/subtle"
	aescbcpb "github.com/hyperledger/aries-framework-go/pkg/crypto/tinkcrypto/primitive/proto/aes_cbc_go_proto"
	aeadpb "github.com/hyperledger/aries-framework-go/pkg/crypto/tinkcrypto/primitive/proto/aes_cbc_hmac_aead_go_proto"
)

const (
	// AESCBCHMACAEADKeyVersion is the maximal version of AES-CBC-HMAC-AEAD keys that Tink supports.
	AESCBCHMACAEADKeyVersion = 0
	// AESCBCHMACAEADTypeURL is the type URL of AES-CBC-HMAC-AEAD keys that Tink supports.
	AESCBCHMACAEADTypeURL = "type.hyperledger.org/hyperledger.aries.crypto.tink.AesCbcHmacAeadKey"
)

func TestNewKeyMultipleTimes(t *testing.T) {
	keyTemplate := aead.AES128CBCHMACSHA256KeyTemplate()
	aeadKeyFormat := new(aeadpb.AesCbcHmacAeadKeyFormat)
	err := proto.Unmarshal(keyTemplate.Value, aeadKeyFormat)
	require.NoError(t, err, "cannot unmarshal AES128CBCHMACSHA256 key template")

	keyManager, err := registry.GetKeyManager(AESCBCHMACAEADTypeURL)
	require.NoError(t, err, "cannot obtain AES-CBC-HMAC-AEAD key manager: %s", err)

	keys := make(map[string]bool)

	const numTests = 24

	for i := 0; i < numTests/2; i++ {
		k, err := keyManager.NewKey(keyTemplate.Value)
		require.NoError(t, err)

		sk, err := proto.Marshal(k)
		require.NoErrorf(t, err, "cannot serialize key")

		key := new(aeadpb.AesCbcHmacAeadKey)
		err = proto.Unmarshal(sk, key)
		require.NoError(t, err)

		keys[string(key.AesCbcKey.KeyValue)] = true
		keys[string(key.HmacKey.KeyValue)] = true

		require.EqualValuesf(t, 16, len(key.AesCbcKey.KeyValue), fmt.Sprintf("unexpected AES key size, got:"+
			" %d, want: 16", len(key.AesCbcKey.KeyValue)))

		require.EqualValuesf(t, 16, len(key.HmacKey.KeyValue), fmt.Sprintf("unexpected HMAC key size, got:"+
			" %d, want: 32", len(key.HmacKey.KeyValue)))

		require.EqualValues(t, AESCBCHMACAEADKeyVersion, key.Version)
	}

	require.EqualValuesf(t, numTests, len(keys), fmt.Sprintf("unexpected number of keys in set, got: %d, want: %d",
		len(keys), numTests))
}

func TestNewKeyWithCorruptedFormat(t *testing.T) {
	keyTemplate := new(tinkpb.KeyTemplate)

	keyTemplate.TypeUrl = AESCBCHMACAEADTypeURL
	keyTemplate.Value = make([]byte, 128)

	keyManager, err := registry.GetKeyManager(AESCBCHMACAEADTypeURL)
	require.NoError(t, err, "cannot obtain AES-CBC-HMAC-AEAD key manager")

	_, err = keyManager.NewKey([]byte{})
	require.EqualError(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format")

	_, err = keyManager.NewKey(keyTemplate.Value)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format",
		"NewKey got: success, want: error due to corrupted format")

	_, err = keyManager.NewKeyData(keyTemplate.Value)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format",
		"NewKeyData got: success, want: error due to corrupted format")

	keyTemplate = aead.AES128CBCHMACSHA256KeyTemplate()
	aeadKeyFormat := new(aeadpb.AesCbcHmacAeadKeyFormat)
	err = proto.Unmarshal(keyTemplate.Value, aeadKeyFormat)
	require.NoError(t, err, "cannot unmarshal AES128CBCHMACSHA256 key template")

	aeadKeyFormat.AesCbcKeyFormat.KeySize = 0

	badMarshalledFormat, err := proto.Marshal(aeadKeyFormat)
	require.NoError(t, err, "cannot marshal AES128CBCHMACSHA256 key template")

	_, err = keyManager.NewKeyData(badMarshalledFormat)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format: "+
		"aes_cbc_hmac_aead_key_manager: invalid AES key size; want 16, 24 or 32, got 0",
		"NewKeyData got: success, want: error due to format with AES key size=0")

	aeadKeyFormat.AesCbcKeyFormat.KeySize = 16
	aeadKeyFormat.HmacKeyFormat.KeySize = 0

	badMarshalledFormat, err = proto.Marshal(aeadKeyFormat)
	require.NoError(t, err, "cannot marshal AES128CBCHMACSHA256 key template")

	_, err = keyManager.NewKeyData(badMarshalledFormat)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format: "+
		"aes_cbc_hmac_aead_key_manager: HMAC KeySize is too small",
		"NewKeyData got: success, want: error due to format with HMAC key size=0")

	aeadKeyFormat.HmacKeyFormat.KeySize = 16
	aeadKeyFormat.HmacKeyFormat.Params.TagSize = 0

	badMarshalledFormat, err = proto.Marshal(aeadKeyFormat)
	require.NoError(t, err, "cannot marshal AES128CBCHMACSHA256 key template")

	_, err = keyManager.NewKeyData(badMarshalledFormat)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format: "+
		"aes_cbc_hmac_aead_key_manager: invalid HmacParams: TagSize 0 is too small",
		"NewKeyData got: success, want: error due to format with HMAC Tag size=0")

	aeadKeyFormat.HmacKeyFormat.Params.TagSize = 33

	badMarshalledFormat, err = proto.Marshal(aeadKeyFormat)
	require.NoError(t, err, "cannot marshal AES128CBCHMACSHA256 key template")

	_, err = keyManager.NewKeyData(badMarshalledFormat)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format: "+
		"aes_cbc_hmac_aead_key_manager: invalid HmacParams: TagSize 33 is too big for HashType \"SHA256\"",
		"NewKeyData got: success, want: error due to format with HMAC Tag size 33 > SHA256 (32)")

	aeadKeyFormat.HmacKeyFormat.Params.TagSize = 32
	aeadKeyFormat.HmacKeyFormat.Params.Hash = commonpb.HashType_UNKNOWN_HASH

	badMarshalledFormat, err = proto.Marshal(aeadKeyFormat)
	require.NoError(t, err, "cannot marshal AES128CBCHMACSHA256 key template")

	_, err = keyManager.NewKeyData(badMarshalledFormat)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key format: "+
		"aes_cbc_hmac_aead_key_manager: invalid HmacParams: HashType \"UNKNOWN_HASH\" not supported",
		"NewKeyData got: success, want: error due to format with invalid HMAC HashType")
}

func TestDoesSupportInvalidURL(t *testing.T) {
	keyManager, err := registry.GetKeyManager(AESCBCHMACAEADTypeURL)
	require.NoError(t, err, "cannot obtain AES-CBC-HMAC-AEAD key manager")

	ok := keyManager.DoesSupport("bad/url")
	require.Falsef(t, ok, "DoesSupport bad URL should return false")
}

func TestPrimitiveWithCorruptedKey(t *testing.T) {
	keyManager, err := registry.GetKeyManager(AESCBCHMACAEADTypeURL)
	require.NoError(t, err, "cannot obtain AES-CBC-HMAC-AEAD key manager")

	_, err = keyManager.Primitive([]byte{})
	require.EqualError(t, err, "aes_cbc_hmac_aead_key_manager: invalid key")

	_, err = keyManager.Primitive(make([]byte, 128))
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: invalid key",
		"Primitive() got: success, want: error due to corrupted key")

	key := &aeadpb.AesCbcHmacAeadKey{
		Version: 0,
		AesCbcKey: &aescbcpb.AesCbcKey{
			Version:  0,
			KeyValue: nil,
		},
		HmacKey: &hmacpb.HmacKey{
			Version: 0,
			Params: &hmacpb.HmacParams{
				Hash:    0,
				TagSize: 0,
			},
			KeyValue: nil,
		},
	}

	mKey, err := proto.Marshal(key)
	require.NoError(t, err)

	_, err = keyManager.Primitive(mKey)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: aes_cbc_hmac_aead_key_manager: invalid AES key"+
		" size; want 16, 24 or 32, got 0",
		"Primitive() got: success, want: error due to corrupted empty aes key")

	key.AesCbcKey.KeyValue = random.GetRandomBytes(32)

	mKey, err = proto.Marshal(key)
	require.NoError(t, err)

	_, err = keyManager.Primitive(mKey)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: cannot create hmac primitive, error: hmac: "+
		"invalid hash algorithm",
		"Primitive() got: success, want: error due to corrupted key with invalid hmac type")

	key.HmacKey.Params.Hash = commonpb.HashType_SHA256

	mKey, err = proto.Marshal(key)
	require.NoError(t, err)

	_, err = keyManager.Primitive(mKey)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: cannot create hmac primitive, error: hmac: "+
		"tag size too small",
		"Primitive() got: success, want: error due to corrupted key with small tag size")

	key.HmacKey.Params.TagSize = 16
	key.Version = 9

	mKey, err = proto.Marshal(key)
	require.NoError(t, err)

	_, err = keyManager.Primitive(mKey)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: aes_cbc_hmac_aead_key_manager: key has version 9;"+
		" only keys with version in range [0..0] are supported",
		"Primitive() got: success, want: error due to corrupted key with small tag size")

	key.Version = 0
	key.AesCbcKey.Version = 9

	mKey, err = proto.Marshal(key)
	require.NoError(t, err)

	_, err = keyManager.Primitive(mKey)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: aes_cbc_hmac_aead_key_manager: key has version 9;"+
		" only keys with version in range [0..0] are supported",
		"Primitive() got: success, want: error due to corrupted key with small tag size")

	key.AesCbcKey.Version = 0
	key.HmacKey.Version = 9

	mKey, err = proto.Marshal(key)
	require.NoError(t, err)

	_, err = keyManager.Primitive(mKey)
	require.EqualErrorf(t, err, "aes_cbc_hmac_aead_key_manager: aes_cbc_hmac_aead_key_manager: key has version 9;"+
		" only keys with version in range [0..0] are supported",
		"Primitive() got: success, want: error due to corrupted key with small tag size")
}

func TestPrimitiveIETFTestVector(t *testing.T) {
	keyManager, err := registry.GetKeyManager(AESCBCHMACAEADTypeURL)
	require.NoError(t, err, "cannot obtain AES-CBC-HMAC-AEAD key manager")

	// Source: https://tools.ietf.org/html/draft-mcgrew-aead-aes-cbc-hmac-sha2-05#section-5
	plaintext := []byte{
		0x41, 0x20, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20,
		0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
		0x69, 0x72, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72, 0x65,
		0x74, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62,
		0x65, 0x20, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x6c, 0x6c, 0x20, 0x69,
		0x6e, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66,
		0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f,
		0x75, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65,
	}

	aad := []byte{
		0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63,
		0x69, 0x70, 0x6c, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x41, 0x75, 0x67, 0x75, 0x73, 0x74, 0x65, 0x20,
		0x4b, 0x65, 0x72, 0x63, 0x6b, 0x68, 0x6f, 0x66, 0x66, 0x73,
	}

	nonce := []byte{
		0x1a, 0xf3, 0x8c, 0x2d, 0xc2, 0xb9, 0x6f, 0xfd, 0xd8, 0x66, 0x94, 0x09, 0x23, 0x41, 0xbc, 0x04,
	}

	ciphertext1 := []byte{
		0xc8, 0x0e, 0xdf, 0xa3, 0x2d, 0xdf, 0x39, 0xd5, 0xef, 0x00, 0xc0, 0xb4, 0x68, 0x83, 0x42, 0x79,
		0xa2, 0xe4, 0x6a, 0x1b, 0x80, 0x49, 0xf7, 0x92, 0xf7, 0x6b, 0xfe, 0x54, 0xb9, 0x03, 0xa9, 0xc9,
		0xa9, 0x4a, 0xc9, 0xb4, 0x7a, 0xd2, 0x65, 0x5c, 0x5f, 0x10, 0xf9, 0xae, 0xf7, 0x14, 0x27, 0xe2,
		0xfc, 0x6f, 0x9b, 0x3f, 0x39, 0x9a, 0x22, 0x14, 0x89, 0xf1, 0x63, 0x62, 0xc7, 0x03, 0x23, 0x36,
		0x09, 0xd4, 0x5a, 0xc6, 0x98, 0x64, 0xe3, 0x32, 0x1c, 0xf8, 0x29, 0x35, 0xac, 0x40, 0x96, 0xc8,
		0x6e, 0x13, 0x33, 0x14, 0xc5, 0x40, 0x19, 0xe8, 0xca, 0x79, 0x80, 0xdf, 0xa4, 0xb9, 0xcf, 0x1b,
		0x38, 0x4c, 0x48, 0x6f, 0x3a, 0x54, 0xc5, 0x10, 0x78, 0x15, 0x8e, 0xe5, 0xd7, 0x9d, 0xe5, 0x9f,
		0xbd, 0x34, 0xd8, 0x48, 0xb3, 0xd6, 0x95, 0x50, 0xa6, 0x76, 0x46, 0x34, 0x44, 0x27, 0xad, 0xe5,
		0x4b, 0x88, 0x51, 0xff, 0xb5, 0x98, 0xf7, 0xf8, 0x00, 0x74, 0xb9, 0x47, 0x3c, 0x82, 0xe2, 0xdb,
	}

	authTag1 := []byte{
		0x65, 0x2c, 0x3f, 0xa3, 0x6b, 0x0a, 0x7c, 0x5b, 0x32, 0x19, 0xfa, 0xb3, 0xa3, 0x0b, 0xc1, 0xc4,
	}

	key1 := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	}

	ciphertext2 := []byte{
		0xea, 0x65, 0xda, 0x6b, 0x59, 0xe6, 0x1e, 0xdb, 0x41, 0x9b, 0xe6, 0x2d, 0x19, 0x71, 0x2a, 0xe5,
		0xd3, 0x03, 0xee, 0xb5, 0x00, 0x52, 0xd0, 0xdf, 0xd6, 0x69, 0x7f, 0x77, 0x22, 0x4c, 0x8e, 0xdb,
		0x00, 0x0d, 0x27, 0x9b, 0xdc, 0x14, 0xc1, 0x07, 0x26, 0x54, 0xbd, 0x30, 0x94, 0x42, 0x30, 0xc6,
		0x57, 0xbe, 0xd4, 0xca, 0x0c, 0x9f, 0x4a, 0x84, 0x66, 0xf2, 0x2b, 0x22, 0x6d, 0x17, 0x46, 0x21,
		0x4b, 0xf8, 0xcf, 0xc2, 0x40, 0x0a, 0xdd, 0x9f, 0x51, 0x26, 0xe4, 0x79, 0x66, 0x3f, 0xc9, 0x0b,
		0x3b, 0xed, 0x78, 0x7a, 0x2f, 0x0f, 0xfc, 0xbf, 0x39, 0x04, 0xbe, 0x2a, 0x64, 0x1d, 0x5c, 0x21,
		0x05, 0xbf, 0xe5, 0x91, 0xba, 0xe2, 0x3b, 0x1d, 0x74, 0x49, 0xe5, 0x32, 0xee, 0xf6, 0x0a, 0x9a,
		0xc8, 0xbb, 0x6c, 0x6b, 0x01, 0xd3, 0x5d, 0x49, 0x78, 0x7b, 0xcd, 0x57, 0xef, 0x48, 0x49, 0x27,
		0xf2, 0x80, 0xad, 0xc9, 0x1a, 0xc0, 0xc4, 0xe7, 0x9c, 0x7b, 0x11, 0xef, 0xc6, 0x00, 0x54, 0xe3,
	}

	authTag2 := []byte{
		0x84, 0x90, 0xac, 0x0e, 0x58, 0x94, 0x9b, 0xfe, 0x51, 0x87, 0x5d, 0x73, 0x3f, 0x93, 0xac, 0x20,
		0x75, 0x16, 0x80, 0x39, 0xcc, 0xc7, 0x33, 0xd7,
	}

	key2 := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	}

	ciphertext3 := []byte{
		0x89, 0x31, 0x29, 0xb0, 0xf4, 0xee, 0x9e, 0xb1, 0x8d, 0x75, 0xed, 0xa6, 0xf2, 0xaa, 0xa9, 0xf3,
		0x60, 0x7c, 0x98, 0xc4, 0xba, 0x04, 0x44, 0xd3, 0x41, 0x62, 0x17, 0x0d, 0x89, 0x61, 0x88, 0x4e,
		0x58, 0xf2, 0x7d, 0x4a, 0x35, 0xa5, 0xe3, 0xe3, 0x23, 0x4a, 0xa9, 0x94, 0x04, 0xf3, 0x27, 0xf5,
		0xc2, 0xd7, 0x8e, 0x98, 0x6e, 0x57, 0x49, 0x85, 0x8b, 0x88, 0xbc, 0xdd, 0xc2, 0xba, 0x05, 0x21,
		0x8f, 0x19, 0x51, 0x12, 0xd6, 0xad, 0x48, 0xfa, 0x3b, 0x1e, 0x89, 0xaa, 0x7f, 0x20, 0xd5, 0x96,
		0x68, 0x2f, 0x10, 0xb3, 0x64, 0x8d, 0x3b, 0xb0, 0xc9, 0x83, 0xc3, 0x18, 0x5f, 0x59, 0xe3, 0x6d,
		0x28, 0xf6, 0x47, 0xc1, 0xc1, 0x39, 0x88, 0xde, 0x8e, 0xa0, 0xd8, 0x21, 0x19, 0x8c, 0x15, 0x09,
		0x77, 0xe2, 0x8c, 0xa7, 0x68, 0x08, 0x0b, 0xc7, 0x8c, 0x35, 0xfa, 0xed, 0x69, 0xd8, 0xc0, 0xb7,
		0xd9, 0xf5, 0x06, 0x23, 0x21, 0x98, 0xa4, 0x89, 0xa1, 0xa6, 0xae, 0x03, 0xa3, 0x19, 0xfb, 0x30,
	}

	authTag3 := []byte{
		0xdd, 0x13, 0x1d, 0x05, 0xab, 0x34, 0x67, 0xdd, 0x05, 0x6f, 0x8e, 0x88, 0x2b, 0xad, 0x70, 0x63,
		0x7f, 0x1e, 0x9a, 0x54, 0x1d, 0x9c, 0x23, 0xe7,
	}

	key3 := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
	}

	ciphertext4 := []byte{
		0x4a, 0xff, 0xaa, 0xad, 0xb7, 0x8c, 0x31, 0xc5, 0xda, 0x4b, 0x1b, 0x59, 0x0d, 0x10, 0xff, 0xbd,
		0x3d, 0xd8, 0xd5, 0xd3, 0x02, 0x42, 0x35, 0x26, 0x91, 0x2d, 0xa0, 0x37, 0xec, 0xbc, 0xc7, 0xbd,
		0x82, 0x2c, 0x30, 0x1d, 0xd6, 0x7c, 0x37, 0x3b, 0xcc, 0xb5, 0x84, 0xad, 0x3e, 0x92, 0x79, 0xc2,
		0xe6, 0xd1, 0x2a, 0x13, 0x74, 0xb7, 0x7f, 0x07, 0x75, 0x53, 0xdf, 0x82, 0x94, 0x10, 0x44, 0x6b,
		0x36, 0xeb, 0xd9, 0x70, 0x66, 0x29, 0x6a, 0xe6, 0x42, 0x7e, 0xa7, 0x5c, 0x2e, 0x08, 0x46, 0xa1,
		0x1a, 0x09, 0xcc, 0xf5, 0x37, 0x0d, 0xc8, 0x0b, 0xfe, 0xcb, 0xad, 0x28, 0xc7, 0x3f, 0x09, 0xb3,
		0xa3, 0xb7, 0x5e, 0x66, 0x2a, 0x25, 0x94, 0x41, 0x0a, 0xe4, 0x96, 0xb2, 0xe2, 0xe6, 0x60, 0x9e,
		0x31, 0xe6, 0xe0, 0x2c, 0xc8, 0x37, 0xf0, 0x53, 0xd2, 0x1f, 0x37, 0xff, 0x4f, 0x51, 0x95, 0x0b,
		0xbe, 0x26, 0x38, 0xd0, 0x9d, 0xd7, 0xa4, 0x93, 0x09, 0x30, 0x80, 0x6d, 0x07, 0x03, 0xb1, 0xf6,
	}

	authTag4 := []byte{
		0x4d, 0xd3, 0xb4, 0xc0, 0x88, 0xa7, 0xf4, 0x5c, 0x21, 0x68, 0x39, 0x64, 0x5b, 0x20, 0x12, 0xbf,
		0x2e, 0x62, 0x69, 0xa8, 0xc5, 0x6a, 0x81, 0x6d, 0xbc, 0x1b, 0x26, 0x77, 0x61, 0x95, 0x5b, 0xc5,
	}

	key4 := []byte{
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
		0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
		0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	}

	tests := []struct {
		name       string
		plaintext  []byte
		aad        []byte
		ciphertext []byte
		authTag    []byte
		key        []byte
		nonce      []byte
		keySize    int
		hmacFn     commonpb.HashType
		tagSize    int
	}{
		{
			name:       "AEAD_AES_128_CBC_HMAC_SHA256",
			plaintext:  plaintext,
			aad:        aad,
			ciphertext: ciphertext1,
			authTag:    authTag1,
			key:        key1,
			nonce:      nonce,
			keySize:    subtle.AES128Size,
			hmacFn:     commonpb.HashType_SHA256,
			tagSize:    len(authTag1),
		},
		{
			name:       "AEAD_AES_192_CBC_HMAC_SHA384",
			plaintext:  plaintext,
			aad:        aad,
			ciphertext: ciphertext2,
			authTag:    authTag2,
			key:        key2,
			nonce:      nonce,
			keySize:    subtle.AES192Size,
			hmacFn:     commonpb.HashType_SHA384,
			tagSize:    len(authTag2),
		},
		{
			name:       "AEAD_AES_256_CBC_HMAC_SHA384",
			plaintext:  plaintext,
			aad:        aad,
			ciphertext: ciphertext3,
			authTag:    authTag3,
			key:        key3,
			nonce:      nonce,
			keySize:    subtle.AES192Size, // Mac key is 24 (192 bits), AES key is 32 (256 bits) in key3.
			hmacFn:     commonpb.HashType_SHA384,
			tagSize:    len(authTag2),
		},
		{
			name:       "AEAD_AES_256_CBC_HMAC_SHA512",
			plaintext:  plaintext,
			aad:        aad,
			ciphertext: ciphertext4,
			authTag:    authTag4,
			key:        key4,
			nonce:      nonce,
			keySize:    subtle.AES256Size,
			hmacFn:     commonpb.HashType_SHA512,
			tagSize:    len(authTag4),
		},
	}

	t.Parallel()

	for _, test := range tests {
		tc := test
		t.Run(tc.name, func(t *testing.T) {
			key := &aeadpb.AesCbcHmacAeadKey{
				Version: 0,
				AesCbcKey: &aescbcpb.AesCbcKey{
					Version:  0,
					KeyValue: tc.key[tc.keySize:],
				},
				HmacKey: &hmacpb.HmacKey{
					Version: 0,
					Params: &hmacpb.HmacParams{
						Hash:    tc.hmacFn,
						TagSize: uint32(tc.tagSize),
					},
					KeyValue: tc.key[:tc.keySize],
				},
			}

			mKey, err := proto.Marshal(key)
			require.NoError(t, err)

			enc, err := keyManager.Primitive(mKey)
			require.NoError(t, err)

			tinkAEAD, ok := enc.(*subtleaead.EncryptThenAuthenticate)
			require.True(t, ok)

			ct := make([]byte, len(nonce)+len(tc.ciphertext)+len(tc.authTag))
			copy(ct, nonce)
			copy(ct[len(nonce):], tc.ciphertext)
			copy(ct[len(nonce)+len(tc.ciphertext):], tc.authTag)

			out, err := tinkAEAD.Decrypt(ct, aad)
			require.NoError(t, err, "unable to decrypt")

			require.EqualValues(t, plaintext, out)
		})
	}
}
