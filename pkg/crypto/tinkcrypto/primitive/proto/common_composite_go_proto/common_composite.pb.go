// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/tink/common_composite.proto

package common_composite_proto

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	common_go_proto "github.com/google/tink/go/proto/common_go_proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyType int32

const (
	KeyType_UNKNOWN_KEY_TYPE KeyType = 0
	KeyType_EC               KeyType = 1
	KeyType_OKP              KeyType = 2
)

var KeyType_name = map[int32]string{
	0: "UNKNOWN_KEY_TYPE",
	1: "EC",
	2: "OKP",
}

var KeyType_value = map[string]int32{
	"UNKNOWN_KEY_TYPE": 0,
	"EC":               1,
	"OKP":              2,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3c0933941e418c01, []int{0}
}

type ECPublicKey struct {
	Version              uint32                            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	CurveType            common_go_proto.EllipticCurveType `protobuf:"varint,2,opt,name=curve_type,json=curveType,proto3,enum=google.crypto.tink.EllipticCurveType" json:"curve_type,omitempty"`
	KeyType              KeyType                           `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=google.crypto.tink.KeyType" json:"key_type,omitempty"`
	KID                  string                            `protobuf:"bytes,4,opt,name=KID,proto3" json:"KID,omitempty"`
	X                    []byte                            `protobuf:"bytes,5,opt,name=x,proto3" json:"x,omitempty"`
	Y                    []byte                            `protobuf:"bytes,6,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *ECPublicKey) Reset()         { *m = ECPublicKey{} }
func (m *ECPublicKey) String() string { return proto.CompactTextString(m) }
func (*ECPublicKey) ProtoMessage()    {}
func (*ECPublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_3c0933941e418c01, []int{0}
}

func (m *ECPublicKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ECPublicKey.Unmarshal(m, b)
}

func (m *ECPublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ECPublicKey.Marshal(b, m, deterministic)
}

func (m *ECPublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ECPublicKey.Merge(m, src)
}

func (m *ECPublicKey) XXX_Size() int {
	return xxx_messageInfo_ECPublicKey.Size(m)
}

func (m *ECPublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ECPublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_ECPublicKey proto.InternalMessageInfo

func (m *ECPublicKey) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ECPublicKey) GetCurveType() common_go_proto.EllipticCurveType {
	if m != nil {
		return m.CurveType
	}
	return common_go_proto.EllipticCurveType_UNKNOWN_CURVE
}

func (m *ECPublicKey) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_UNKNOWN_KEY_TYPE
}

func (m *ECPublicKey) GetKID() string {
	if m != nil {
		return m.KID
	}
	return ""
}

func (m *ECPublicKey) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECPublicKey) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterEnum("google.crypto.tink.KeyType", KeyType_name, KeyType_value)
	proto.RegisterType((*ECPublicKey)(nil), "google.crypto.tink.ECPublicKey")
}

func init() { proto.RegisterFile("proto/common_composite.proto", fileDescriptor_3c0933941e418c01) }

var fileDescriptor_3c0933941e418c01 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xd1, 0x6a, 0xdb, 0x30,
	0x14, 0x86, 0x27, 0x67, 0xb3, 0x17, 0x2d, 0x1b, 0x46, 0xec, 0xc2, 0x6c, 0xb9, 0x30, 0x85, 0x82,
	0x29, 0xc4, 0x2e, 0x2d, 0xf4, 0x01, 0x92, 0xf8, 0x22, 0x18, 0x1c, 0x63, 0x52, 0x4a, 0x7a, 0x63,
	0x62, 0xf5, 0xd4, 0x11, 0xb6, 0x23, 0xa1, 0x28, 0x69, 0xf4, 0x10, 0x7d, 0x89, 0xbe, 0x52, 0x5f,
	0xa8, 0xd8, 0x4e, 0xa0, 0xd0, 0xdc, 0xfd, 0xff, 0xe1, 0x7c, 0x9f, 0x84, 0x84, 0x87, 0x42, 0x72,
	0xc5, 0x03, 0xca, 0xeb, 0x9a, 0x6f, 0x32, 0xca, 0x6b, 0xc1, 0xb7, 0x4c, 0x81, 0xdf, 0x8e, 0x09,
	0x29, 0x38, 0x2f, 0x2a, 0xf0, 0xa9, 0xd4, 0x42, 0x71, 0x5f, 0xb1, 0x4d, 0xf9, 0x8f, 0x7c, 0x26,
	0xba, 0xbd, 0x8b, 0x77, 0x84, 0x7f, 0x85, 0x93, 0x64, 0x97, 0x57, 0x8c, 0x46, 0xa0, 0x89, 0x83,
	0xad, 0x3d, 0xc8, 0x2d, 0xe3, 0x1b, 0x07, 0xb9, 0xc8, 0xfb, 0x9d, 0x9e, 0x2a, 0x99, 0x62, 0x4c,
	0x77, 0x72, 0x0f, 0x99, 0xd2, 0x02, 0x1c, 0xc3, 0x45, 0xde, 0x9f, 0x9b, 0x4b, 0xff, 0xeb, 0x31,
	0x7e, 0x58, 0x55, 0x4c, 0x28, 0x46, 0x27, 0xcd, 0xf6, 0x42, 0x0b, 0x48, 0xfb, 0xf4, 0x14, 0xc9,
	0x1d, 0xfe, 0x59, 0x82, 0xee, 0x1c, 0xbd, 0xd6, 0xf1, 0xff, 0x9c, 0x23, 0x02, 0xdd, 0x92, 0x56,
	0xd9, 0x05, 0x62, 0xe3, 0x5e, 0x34, 0x9b, 0x3a, 0xdf, 0x5d, 0xe4, 0xf5, 0xd3, 0x26, 0x92, 0x01,
	0x46, 0x07, 0xe7, 0x87, 0x8b, 0xbc, 0x41, 0x8a, 0x0e, 0x4d, 0xd3, 0x8e, 0xd9, 0x35, 0x7d, 0x75,
	0x8d, 0xad, 0xa3, 0x81, 0xfc, 0xc5, 0xf6, 0x7d, 0x1c, 0xc5, 0xf3, 0x87, 0x38, 0x8b, 0xc2, 0x65,
	0xb6, 0x58, 0x26, 0xa1, 0xfd, 0x8d, 0x98, 0xd8, 0x08, 0x27, 0x36, 0x22, 0x16, 0xee, 0xcd, 0xa3,
	0xc4, 0x36, 0xc6, 0xaf, 0x08, 0x0f, 0x29, 0xaf, 0xcf, 0xdd, 0xa5, 0x7d, 0xa8, 0x04, 0x3d, 0xe6,
	0x05, 0x53, 0xeb, 0x5d, 0xee, 0x53, 0x5e, 0x07, 0x6b, 0x2d, 0x40, 0x56, 0xf0, 0x54, 0x80, 0x0c,
	0x56, 0x92, 0xc1, 0x76, 0xf4, 0x2c, 0x57, 0x35, 0xbc, 0x70, 0x59, 0x8e, 0x0a, 0x1e, 0x74, 0x78,
	0xd0, 0xe0, 0xc7, 0x28, 0x24, 0xab, 0x99, 0x62, 0x7b, 0x08, 0xce, 0x7f, 0x5b, 0xd6, 0x8e, 0xdf,
	0x0c, 0x73, 0x31, 0x8b, 0xa3, 0x64, 0x9c, 0x9b, 0x6d, 0xbf, 0xfd, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x93, 0x75, 0xad, 0x0c, 0xe6, 0x01, 0x00, 0x00,
}
